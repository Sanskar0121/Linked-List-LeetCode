CODE : 
class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        slow, fast = 0, 0 
        while True:
            slow = nums[slow]
            fast = nums[nums[fast]] 
            if slow == fast:
                break
        
        slow2 = 0 
        while True:
            slow = nums[slow] 
            slow2 = nums[slow2] 
            if slow == slow2:
                return slow 

Explaination :

Great — you're looking at Floyd's Tortoise and Hare Algorithm (Cycle Detection) applied to the "Find the Duplicate Number" problem. Let me walk you through it step-by-step so you understand how this elegant approach works.

🧩 Problem Statement
Given an array nums of n + 1 integers where each integer is in the range [1, n] inclusive, there is only one repeated number, but it could be repeated more than once.
Your task is to find that one duplicate number, using constant extra space and no modification of the input array.

🧠 Key Insight
Treat the array like a linked list:

Each index is like a node.

The value at that index points to the next node (i.e., nums[i] is the next index).

Since a duplicate number exists, it creates a cycle in this "linked list" structure.

Example:

python
Copy
Edit
nums = [1, 3, 4, 2, 2]

# i:     0  1  2  3  4
# nums:  1  3  4  2  2

# Traverse: 0 -> 1 -> 3 -> 2 -> 4 -> 2 -> 4 -> 2 ... (cycle between 2 and 4)
🔁 Step-by-Step Explanation
python
Copy
Edit
slow, fast = 0, 0 
while True:
    slow = nums[slow]
    fast = nums[nums[fast]]
    if slow == fast:
        break
🐢🐇 Phase 1: Detect the cycle
Use Floyd’s Tortoise and Hare approach:

slow moves one step.

fast moves two steps.

Eventually they meet inside the cycle if a cycle exists (which it does due to the duplicate).

python
Copy
Edit
slow2 = 0 
while True:
    slow = nums[slow]
    slow2 = nums[slow2]
    if slow == slow2:
        return slow
🎯 Phase 2: Find the entrance to the cycle (duplicate number)
Reset one pointer (slow2) to the beginning (0).

Move both slow and slow2 one step at a time.

The point where they meet is the entrance to the cycle, i.e., the duplicate number.

🧪 Dry Run Example
python
Copy
Edit
nums = [3, 1, 3, 4, 2]
Index path:
0 → 3 → 4 → 2 → 3 → 4 → 2 → ...

Cycle: 3 → 4 → 2 → 3 ...

After applying the algorithm, it returns 3 (the duplicate).

✅ Time & Space Complexity
Time: O(n)

Space: O(1) → Constant space (no extra data structures)
