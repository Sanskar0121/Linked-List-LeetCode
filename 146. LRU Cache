CODE : 
class LRUCache:

    def __init__(self, capacity: int):
        self.cache = OrderedDict() 
        self.cap = capacity 
        

    def get(self, key: int) -> int:
        if key not in self.cache:
            return -1
        self.cache.move_to_end(key)
        return self.cache[key] 

        

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            self.cache.move_to_end(key)
        self.cache[key] = value

        if len(self.cache) > self.cap:
            self.cache.popitem(last=False)
        


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)

EXPLAINATION : 

‚úÖ How It Works
Initialization (__init__):

Stores capacity (self.cap).

Uses OrderedDict to maintain insertion order (also supports fast reordering and deletion).

get(key):

If key not found, return -1.

If key is found:

Move it to the end to mark as recently used.

Return the value.

put(key, value):

If key already exists, move it to the end.

Insert/update the key with the new value.

If cache exceeds capacity, remove the least recently used item (i.e., the first item using popitem(last=False)).

‚è± Time Complexity
get() ‚Üí O(1) (amortized)

put() ‚Üí O(1) (amortized)

Thanks to OrderedDict, all operations are optimized.

üîÑ Example:
python
Copy
Edit
obj = LRUCache(2)
obj.put(1, 1)       # cache = {1=1}
obj.put(2, 2)       # cache = {1=1, 2=2}
print(obj.get(1))   # returns 1, cache = {2=2, 1=1}
obj.put(3, 3)       # evicts key 2, cache = {1=1, 3=3}
print(obj.get(2))   # returns -1 (not found) 

