CODE :

"""
# Definition for a Node.
class Node:
    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):
        self.val = int(x)
        self.next = next
        self.random = random
"""
class Solution:
    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node':
        oldToCopy = collections.defaultdict(lambda: Node(0)) 
        oldToCopy[None] = None

        cur = head
        while cur:
            oldToCopy[cur].val = cur.val
            oldToCopy[cur].next = oldToCopy[cur.next] 
            oldToCopy[cur].random = oldToCopy[cur.random] 
            cur = cur.next
        return oldToCopy[head] 

Explaination:

Let's break this down step by step. The problem being solved here is:

Copy a linked list where each node has a next pointer and a random pointer (which can point to any node in the list or None).

📌 Node Class Definition
python
Copy
Edit
class Node:
    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):
        self.val = int(x)
        self.next = next
        self.random = random
Each node has:

val: the node's value.

next: the pointer to the next node.

random: a pointer that can point to any node in the list (including None).

✅ Goal
To create a deep copy of this complex list, meaning:

The new list should have all new nodes.

Each new node should have the same value as the original.

The next and random pointers should point to the corresponding new nodes, not the old ones.

🔍 The copyRandomList Function
python
Copy
Edit
class Solution:
    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node':
Takes head of the original list and returns the head of the deep-copied list.

🧠 Step 1: Create a map from original nodes to their copies
python
Copy
Edit
oldToCopy = collections.defaultdict(lambda: Node(0)) 
oldToCopy[None] = None
oldToCopy is a dictionary that maps an original node to its copied version.

Using defaultdict, so if a key doesn’t exist yet, it creates a new Node(0) by default (temporary value).

This avoids manual checking for None or uninitialized nodes.

🔁 Step 2: Traverse the original list and fill the map
python
Copy
Edit
cur = head
while cur:
    oldToCopy[cur].val = cur.val
    oldToCopy[cur].next = oldToCopy[cur.next] 
    oldToCopy[cur].random = oldToCopy[cur.random] 
    cur = cur.next
Let’s understand what each line inside the loop is doing:

oldToCopy[cur].val = cur.val: Updates the copied node’s value to match the original.

oldToCopy[cur].next = oldToCopy[cur.next]: Links the next pointer of the copied node to the copied version of the original’s next.

oldToCopy[cur].random = oldToCopy[cur.random]: Similarly for the random pointer.

Move to the next node.

This step ensures that all the new nodes are created and their next and random pointers are properly linked.

🔚 Step 3: Return the head of the new list
python
Copy
Edit
return oldToCopy[head] 
Returns the new head corresponding to the original head.

📝 Summary
The code:

Creates a mapping of old nodes to their new copies.

Sets values and connections (next and random) for the copied nodes.

Returns the head of the new list.

💡 Example
Suppose original list is:

arduino
Copy
Edit
1 -> 2 -> 3
randoms: 1.random → 3, 2.random → 1, 3.random → None
Then the copied list will be:

matlab
Copy
Edit
1' -> 2' -> 3'
randoms: 1'.random → 3', 2'.random → 1', 3'.random → None
Everything is completely new (deep copy) but with the same structure. 
